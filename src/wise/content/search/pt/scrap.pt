<table tal:define="res view/data_rows">
  <thead>
    <tr>
      <th
        tal:repeat="label res/keys"
        tal:content="python: view.labelAsTitle(label)">
        Label here
      </th>
    </tr>
  </thead>
  <tbody>
    <tr tal:repeat="row res">
      <td tal:repeat="cell row" tal:content="cell"></td>
    </tr>
  </tbody>
</table>


# @register_form
# class A81bForm(SubForm):
#     title = 'Article 8.1b (Analysis of pressures and impacts)'
#     fields = Fields(interfaces.IA81bSubformSelect)
#     prefix = 'a81bselect'
#     data = {}
#
#     def get_subform(self):
#         klass = THEME_FORMS.get(self.data['theme'])
#
#         return super(A81bForm, self).get_subform(klass)
#

# @register_theme_subform('Ecosystem(s)', 'Pressures and impacts')
# class XXX(ItemDisplayForm, BaseFormUtil):
#     fields = Fields(interfaces.IRecordSelect)
#     prefix = 'a81a_eco'
#
#     def get_db_results(self):
#         page = int(self.data.get('page')) or 0
#         muid = self.get_marine_unit_id()
#         res = db.get_a10_targets(marine_unit_id=muid, page=page)
#
#         return res
#
#     def get_extra_data(self):
#         if not self.item:
#             return {}
#
#         target_id = self.item['MSFD10_Target_ID']
#
#         res = db.get_a10_feature_targets(target_id)
#         ft = pivot_data(res, 'FeatureType')
#
#         # res = db.get_a10_feature_targets(target_id)
#         # criteria = pivot_data(res, 'FeatureType')
#
#         return [
#             ('Feature Types', ft),
#             # ('Criteria Indicators', criteria),
#         ]



# ARTICLES = [
#     ('a81c', 'Article 8.1c (Economic and social analysis)'),
# ]

# articles_vocabulary = SimpleVocabulary(
#     [SimpleTerm(a[0], a[0], a[1]) for a in ARTICLES]
# )
#
#
# @provider(IVocabularyFactory)
# def articles_vocabulary_factory(context):
#     return articles_vocabulary


# A81A_THEMES = [
#     'Ecosystem(s)',
#     'Functional group(s)',
#     'Habitat(s)',
#     'Species(s)',
#     'Other(s)',
#     'NIS Inventory',
#     'Physical',
# ]
#
# a81a_themes_vocabulary = SimpleVocabulary(
#     [SimpleTerm(a, a, a) for a in A81A_THEMES]
# )


# @provider(IVocabularyFactory)
# def a81a_themes_vocabulary_factory(context):
#     return vocab


# A81B_THEMES = [
#     'Extraction of fish and shellfish',
#     'Extraction of seaweed, maerl and other',
#     'Harzardous substances',
#     'Hydrological processes',
#     'Marine litter',
#     'Microbial pathogens',
#     'Non-indigenous species',
#     'Underwater noise',
#     'Nutrients',
#     'Physical damage',
#     'Pollutant events',
#     'Acidification',
# ]

# a81b_themes_vocabulary = SimpleVocabulary(
#     [SimpleTerm(a, a, a) for a in A81B_THEMES]
# )


# @provider(IVocabularyFactory)
# def a81b_themes_vocabulary_factory(context):
#     return a81b_themes_vocabulary


    # def update(self):
    #     super(MainForm, self).update()
    #
    #     self.data, errors = self.extractData()
    #
    #     if all(self.data.values()):
    #         self.data['MarineUnitID'] = db.get_marine_unit_ids(**self.data)
    #
    #         if not errors and self.data['MarineUnitID']:
    #             self.subform = ArticleSelectForm(
    #                 self.context, self.request, self)
    #
    #     if errors:
    #         self.status = self.formErrorsMessage
    #
    #         return

    # import pdb; pdb.set_trace()

#     conn = connection()
#     res = conn.execute(text("""
# SELECT *
# FROM MSFD9_Descriptors
# WHERE
# MarineUnitID = :marine_unit_id
# ORDER BY MSFD9_Descriptor_ID
# OFFSET :page ROWS
# FETCH NEXT 1 ROWS ONLY
# """), marine_unit_id=marine_unit_id, page=page)

# class SubFormsVocabulary(SimpleVocabulary):
#     """ An hackish vocabulary that retrieves subform names for a form
#     """
#
#     # TODO: I'm not sure if this is needed. Its existance needs to be defended
#
#     def __init__(self, form_klass):
#         self.form_klass = form_klass
#         pass
#
#     def __call__(self, context):
#         self.context = context
#
#     @property
#     def _terms(self):
#         terms = []
#
#         forms = SUBFORMS[self.form_klass]
#
#         for k in forms:
#             terms.append(SimpleTerm(k, k.title, k.title))
#
#         return terms
#
#     @property
#     def by_value(self):
#         d = {}
#
#         for term in self._terms:
#             d[term.value] = term
#
#         return d
#
#     @property
#     def by_token(self):
#         d = {}
#
#         for term in self._terms:
#             d[term.token] = term
#
#         return d

# class CollectionDisplayForm(EmbededForm):
#     """ Display a collection of data (multiple rows of results)
#     """
#
#     pages = None        # a list of items to show
#
#     template = ViewPageTemplateFile('pt/collection.pt')
#
#     def __init__(self, *args, **kwargs):
#         super(CollectionDisplayForm, self).__init__(*args, **kwargs)
#
#     def update(self):
#         super(CollectionDisplayForm, self).update()
#         self.count, self.items = self.get_db_results()
#
#     def display_item(self, item):
#         return item


